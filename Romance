#Romance
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
import time
import re
import numpy as np

# Initialize WebDriver (consider using a headless option for faster execution)
options = webdriver.ChromeOptions()
# options.add_argument("--headless")  # Uncomment for headless browsing
driver = webdriver.Chrome(options=options)

driver.get("https://www.imdb.com/search/title/?title_type=feature&release_date=2024-01-01,2024-12-31&genres=romance")
time.sleep(3)

def click_load_more():
    try:
        load_more_button = driver.find_element(By.XPATH, '//*[@id="__next"]/main/div[2]/div[3]/section/section/div/section/section/div[2]/div/section/div[2]/div[2]/div[2]/div/span/button/span/span')
        load_more_button.click()  # Directly click, no need for ActionChains if the button is clickable
        time.sleep(3)
        return True
    except Exception as e:
        print(f"Error clicking 'Load More' button: {e}")
        return False

# Efficiently load all results (with a limit to prevent infinite loops)
max_clicks = 10  # Set a maximum number of clicks to avoid potential infinite loop
clicks = 0
while click_load_more() and clicks < max_clicks:
    print("Clicked 'Load More' button")
    clicks += 1

print("Finished loading content.")
time.sleep(3)

titles = []
ratings = []
votings = []
durations = []

movie_items = driver.find_elements(By.XPATH, '//*[@id="__next"]/main/div[2]/div[3]/section/section/div/section/section/div[2]/div/section/div[2]/div[2]/ul/li')

def convert_duration_to_seconds(duration_str):
    if duration_str:
        match = re.match(r'(?:(\d+)h)?\s*(?:(\d+)m)?', duration_str)
        if match:
            hours = int(match.group(1)) if match.group(1) else 0
            minutes = int(match.group(2)) if match.group(2) else 0
            return (hours * 3600) + (minutes * 60)
    return np.nan  # Return NaN for invalid durations

def convert_votes(vote_str):
    if isinstance(vote_str, str):
        vote_str = vote_str.replace('(', '').replace(')', '').replace(',', '') #remove , as well
        try:
            if 'K' in vote_str:
                return int(float(vote_str.replace('K', '')) * 1000)
            elif vote_str.isdigit():
                return int(vote_str)
        except ValueError:
            return np.nan
    return np.nan  # Return NaN for invalid vote strings


for movie_item in movie_items:
    try:
        title = movie_item.find_element(By.XPATH, './div/div/div/div[1]/div[2]/div[1]/a/h3').text
        rating = movie_item.find_element(By.XPATH, './div/div/div/div[1]/div[2]/span/div/span/span[1]').text
        
        try:
            voting_element = movie_item.find_element(By.XPATH, './div/div/div/div[1]/div[2]/span/div/span/span[2]')
            voting = voting_element.text if voting_element else None
        except:
            voting = None

        try:
            duration_text = movie_item.find_element(By.XPATH, './div/div/div/div[1]/div[2]/div[2]/span[2]').text
        except:
            duration_text = None

        duration_seconds = convert_duration_to_seconds(duration_text)
        voting_count = convert_votes(voting)

        titles.append(title)
        ratings.append(rating)
        votings.append(voting_count)
        durations.append(duration_seconds)

    except Exception as e:
        print(f"Error extracting data for a movie: {e}")
        continue

driver.quit()

df = pd.DataFrame({
    'Title': titles,
    'Rating': ratings,
    'Voting': votings,
    'Duration_seconds': durations
})

df["Genre"]="Romance"
df=df.dropna()
df.to_csv("Romance.csv",index=False)
df
